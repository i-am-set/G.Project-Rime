[gd_scene load_steps=25 format=3 uid="uid://ckus4u1u4kftl"]

[ext_resource type="PackedScene" uid="uid://btv0a42cgxt8g" path="res://levels/WE_test.tscn" id="1_j77fg"]
[ext_resource type="Material" uid="uid://cn1gsy15bkaff" path="res://materials/grid.tres" id="2_km72d"]
[ext_resource type="PackedScene" uid="uid://c3ffql15mo0aj" path="res://controllers/fps_controller.tscn" id="3_p3ril"]
[ext_resource type="Texture2D" uid="uid://ivvpsi314b34" path="res://textures/grid.jpg" id="4_3lfq3"]
[ext_resource type="Texture2D" uid="uid://d4io8dgtn66sn" path="res://textures/Lambdaspray_2a.png" id="5_hesfj"]

[sub_resource type="BoxMesh" id="BoxMesh_gd0ev"]
material = ExtResource("2_km72d")
size = Vector3(20, 0.5, 80)

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_pmrh2"]
data = PackedVector3Array(-10, 0.25, 40, 10, 0.25, 40, -10, -0.25, 40, 10, 0.25, 40, 10, -0.25, 40, -10, -0.25, 40, 10, 0.25, -40, -10, 0.25, -40, 10, -0.25, -40, -10, 0.25, -40, -10, -0.25, -40, 10, -0.25, -40, 10, 0.25, 40, 10, 0.25, -40, 10, -0.25, 40, 10, 0.25, -40, 10, -0.25, -40, 10, -0.25, 40, -10, 0.25, -40, -10, 0.25, 40, -10, -0.25, -40, -10, 0.25, 40, -10, -0.25, 40, -10, -0.25, -40, 10, 0.25, 40, -10, 0.25, 40, 10, 0.25, -40, -10, 0.25, 40, -10, 0.25, -40, 10, 0.25, -40, -10, -0.25, 40, 10, -0.25, 40, -10, -0.25, -40, 10, -0.25, 40, 10, -0.25, -40, -10, -0.25, -40)

[sub_resource type="Shader" id="Shader_cwof1"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.dev4's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = (albedo.rgb * albedo_tex.r) + albedo_tex.g + albedo_tex.b;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = (1.0 - albedo_tex.g) * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_tkeet"]
render_priority = 0
shader = SubResource("Shader_cwof1")
shader_parameter/albedo = Color(1, 0.666667, 0, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.5
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.5, 0.5, 0.5)
shader_parameter/uv1_offset = Vector3(0.5, 0.5, 0.5)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("4_3lfq3")
shader_parameter/texture_roughness = ExtResource("4_3lfq3")

[sub_resource type="BoxMesh" id="BoxMesh_qctcq"]
material = SubResource("ShaderMaterial_tkeet")
size = Vector3(1, 5, 20)

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_20dey"]
data = PackedVector3Array(-0.5, 2.5, 10, 0.5, 2.5, 10, -0.5, -2.5, 10, 0.5, 2.5, 10, 0.5, -2.5, 10, -0.5, -2.5, 10, 0.5, 2.5, -10, -0.5, 2.5, -10, 0.5, -2.5, -10, -0.5, 2.5, -10, -0.5, -2.5, -10, 0.5, -2.5, -10, 0.5, 2.5, 10, 0.5, 2.5, -10, 0.5, -2.5, 10, 0.5, 2.5, -10, 0.5, -2.5, -10, 0.5, -2.5, 10, -0.5, 2.5, -10, -0.5, 2.5, 10, -0.5, -2.5, -10, -0.5, 2.5, 10, -0.5, -2.5, 10, -0.5, -2.5, -10, 0.5, 2.5, 10, -0.5, 2.5, 10, 0.5, 2.5, -10, -0.5, 2.5, 10, -0.5, 2.5, -10, 0.5, 2.5, -10, -0.5, -2.5, 10, 0.5, -2.5, 10, -0.5, -2.5, -10, 0.5, -2.5, 10, 0.5, -2.5, -10, -0.5, -2.5, -10)

[sub_resource type="BoxMesh" id="BoxMesh_n5ou5"]
material = SubResource("ShaderMaterial_tkeet")
size = Vector3(1, 5, 10)

[sub_resource type="Shader" id="Shader_xhlsx"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.dev4's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = (albedo.rgb * albedo_tex.r) + albedo_tex.g + albedo_tex.b;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = (1.0 - albedo_tex.g) * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_khlyx"]
render_priority = 0
shader = SubResource("Shader_xhlsx")
shader_parameter/albedo = Color(1, 0, 0, 1)
shader_parameter/point_size = 0.0
shader_parameter/roughness = 0.5
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.5, 0.5, 0.5)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("4_3lfq3")
shader_parameter/texture_roughness = ExtResource("4_3lfq3")

[sub_resource type="BoxMesh" id="BoxMesh_cwg2w"]
material = SubResource("ShaderMaterial_khlyx")
size = Vector3(10, 3, 0.2)

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_3u8xh"]
data = PackedVector3Array(-5, 1.5, 0.1, 5, 1.5, 0.1, -5, -1.5, 0.1, 5, 1.5, 0.1, 5, -1.5, 0.1, -5, -1.5, 0.1, 5, 1.5, -0.1, -5, 1.5, -0.1, 5, -1.5, -0.1, -5, 1.5, -0.1, -5, -1.5, -0.1, 5, -1.5, -0.1, 5, 1.5, 0.1, 5, 1.5, -0.1, 5, -1.5, 0.1, 5, 1.5, -0.1, 5, -1.5, -0.1, 5, -1.5, 0.1, -5, 1.5, -0.1, -5, 1.5, 0.1, -5, -1.5, -0.1, -5, 1.5, 0.1, -5, -1.5, 0.1, -5, -1.5, -0.1, 5, 1.5, 0.1, -5, 1.5, 0.1, 5, 1.5, -0.1, -5, 1.5, 0.1, -5, 1.5, -0.1, 5, 1.5, -0.1, -5, -1.5, 0.1, 5, -1.5, 0.1, -5, -1.5, -0.1, 5, -1.5, 0.1, 5, -1.5, -0.1, -5, -1.5, -0.1)

[sub_resource type="BoxMesh" id="BoxMesh_bptv1"]
material = SubResource("ShaderMaterial_khlyx")
size = Vector3(10, 3, 0.2)

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_fefkg"]
data = PackedVector3Array(-5, 1.5, 0.1, 5, 1.5, 0.1, -5, -1.5, 0.1, 5, 1.5, 0.1, 5, -1.5, 0.1, -5, -1.5, 0.1, 5, 1.5, -0.1, -5, 1.5, -0.1, 5, -1.5, -0.1, -5, 1.5, -0.1, -5, -1.5, -0.1, 5, -1.5, -0.1, 5, 1.5, 0.1, 5, 1.5, -0.1, 5, -1.5, 0.1, 5, 1.5, -0.1, 5, -1.5, -0.1, 5, -1.5, 0.1, -5, 1.5, -0.1, -5, 1.5, 0.1, -5, -1.5, -0.1, -5, 1.5, 0.1, -5, -1.5, 0.1, -5, -1.5, -0.1, 5, 1.5, 0.1, -5, 1.5, 0.1, 5, 1.5, -0.1, -5, 1.5, 0.1, -5, 1.5, -0.1, 5, 1.5, -0.1, -5, -1.5, 0.1, 5, -1.5, 0.1, -5, -1.5, -0.1, 5, -1.5, 0.1, 5, -1.5, -0.1, -5, -1.5, -0.1)

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_m06vb"]
data = PackedVector3Array(-5, 1.5, 0.1, 5, 1.5, 0.1, -5, -1.5, 0.1, 5, 1.5, 0.1, 5, -1.5, 0.1, -5, -1.5, 0.1, 5, 1.5, -0.1, -5, 1.5, -0.1, 5, -1.5, -0.1, -5, 1.5, -0.1, -5, -1.5, -0.1, 5, -1.5, -0.1, 5, 1.5, 0.1, 5, 1.5, -0.1, 5, -1.5, 0.1, 5, 1.5, -0.1, 5, -1.5, -0.1, 5, -1.5, 0.1, -5, 1.5, -0.1, -5, 1.5, 0.1, -5, -1.5, -0.1, -5, 1.5, 0.1, -5, -1.5, 0.1, -5, -1.5, -0.1, 5, 1.5, 0.1, -5, 1.5, 0.1, 5, 1.5, -0.1, -5, 1.5, 0.1, -5, 1.5, -0.1, 5, 1.5, -0.1, -5, -1.5, 0.1, 5, -1.5, 0.1, -5, -1.5, -0.1, 5, -1.5, 0.1, 5, -1.5, -0.1, -5, -1.5, -0.1)

[sub_resource type="Shader" id="Shader_cyyhh"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.dev4's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
varying vec3 uv1_triplanar_pos;
uniform float uv1_blend_sharpness;
varying vec3 uv1_power_normal;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	TANGENT = vec3(0.0,0.0,-1.0) * abs(NORMAL.x);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.y);
	TANGENT+= vec3(1.0,0.0,0.0) * abs(NORMAL.z);
	TANGENT = normalize(TANGENT);
	BINORMAL = vec3(0.0,1.0,0.0) * abs(NORMAL.x);
	BINORMAL+= vec3(0.0,0.0,-1.0) * abs(NORMAL.y);
	BINORMAL+= vec3(0.0,1.0,0.0) * abs(NORMAL.z);
	BINORMAL = normalize(BINORMAL);
	uv1_power_normal=pow(abs(NORMAL),vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset;
	uv1_power_normal/=dot(uv1_power_normal,vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0,-1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler,vec3 p_weights,vec3 p_triplanar_pos) {
	vec4 samp=vec4(0.0);
	samp+= texture(p_sampler,p_triplanar_pos.xy) * p_weights.z;
	samp+= texture(p_sampler,p_triplanar_pos.xz) * p_weights.y;
	samp+= texture(p_sampler,p_triplanar_pos.zy * vec2(-1.0,1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo,uv1_power_normal,uv1_triplanar_pos);
	ALBEDO = (albedo.rgb * albedo_tex.r) + albedo_tex.g + albedo_tex.b;
	float metallic_tex = dot(triplanar_texture(texture_metallic,uv1_power_normal,uv1_triplanar_pos),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness,uv1_power_normal,uv1_triplanar_pos),roughness_texture_channel);
	ROUGHNESS = (1.0 - albedo_tex.g) * roughness;
	SPECULAR = specular;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ljwfn"]
render_priority = 0
shader = SubResource("Shader_cyyhh")
shader_parameter/albedo = Color(1, 0.666667, 0, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.5
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.5, 0.5, 0.5)
shader_parameter/uv1_offset = Vector3(0.5, 0.5, 0.5)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("4_3lfq3")
shader_parameter/texture_roughness = ExtResource("4_3lfq3")

[sub_resource type="BoxMesh" id="BoxMesh_dq3x3"]
material = SubResource("ShaderMaterial_ljwfn")
size = Vector3(1, 5, 33.38)

[sub_resource type="ConcavePolygonShape3D" id="ConcavePolygonShape3D_n4aja"]
data = PackedVector3Array(-10, 0.25, 40, 10, 0.25, 40, -10, -0.25, 40, 10, 0.25, 40, 10, -0.25, 40, -10, -0.25, 40, 10, 0.25, -40, -10, 0.25, -40, 10, -0.25, -40, -10, 0.25, -40, -10, -0.25, -40, 10, -0.25, -40, 10, 0.25, 40, 10, 0.25, -40, 10, -0.25, 40, 10, 0.25, -40, 10, -0.25, -40, 10, -0.25, 40, -10, 0.25, -40, -10, 0.25, 40, -10, -0.25, -40, -10, 0.25, 40, -10, -0.25, 40, -10, -0.25, -40, 10, 0.25, 40, -10, 0.25, 40, 10, 0.25, -40, -10, 0.25, 40, -10, 0.25, -40, 10, 0.25, -40, -10, -0.25, 40, 10, -0.25, 40, -10, -0.25, -40, 10, -0.25, 40, 10, -0.25, -40, -10, -0.25, -40)

[sub_resource type="BoxMesh" id="BoxMesh_qjnnx"]
size = Vector3(0.1, 2, 0.1)

[node name="Node3D" type="Node3D"]

[node name="WorldEnvironment" parent="." instance=ExtResource("1_j77fg")]

[node name="Floor" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.25, -24.214)
mesh = SubResource("BoxMesh_gd0ev")

[node name="StaticBody3D" type="StaticBody3D" parent="Floor"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Floor/StaticBody3D"]
shape = SubResource("ConcavePolygonShape3D_pmrh2")

[node name="FPSController" parent="." instance=ExtResource("3_p3ril")]
transform = Transform3D(-0.995583, 0, -0.0938825, 0, 1, 0, 0.0938825, 0, -0.995583, -4.55494, 0, 0.433014)

[node name="Node3D" type="Node3D" parent="."]

[node name="MeshInstance3D" type="MeshInstance3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -5.5, 2.5, 0)
mesh = SubResource("BoxMesh_qctcq")
skeleton = NodePath("../..")

[node name="StaticBody3D" type="StaticBody3D" parent="Node3D/MeshInstance3D"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Node3D/MeshInstance3D/StaticBody3D"]
shape = SubResource("ConcavePolygonShape3D_20dey")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5.5, 2.5, 0)
mesh = SubResource("BoxMesh_qctcq")
skeleton = NodePath("../..")

[node name="MeshInstance3D3" type="MeshInstance3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -5.5, 2.5, -16)
mesh = SubResource("BoxMesh_n5ou5")
skeleton = NodePath("../..")

[node name="MeshInstance3D4" type="MeshInstance3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5.5, 2.5, -21.1681)
mesh = SubResource("BoxMesh_qctcq")
skeleton = NodePath("../..")

[node name="MeshInstance3D5" type="MeshInstance3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1.19967, -1.51269)
mesh = SubResource("BoxMesh_cwg2w")

[node name="StaticBody3D" type="StaticBody3D" parent="Node3D/MeshInstance3D5"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Node3D/MeshInstance3D5/StaticBody3D"]
shape = SubResource("ConcavePolygonShape3D_3u8xh")

[node name="MeshInstance3D6" type="MeshInstance3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.692474, -6.91628)
mesh = SubResource("BoxMesh_bptv1")

[node name="StaticBody3D" type="StaticBody3D" parent="Node3D/MeshInstance3D6"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Node3D/MeshInstance3D6/StaticBody3D"]
shape = SubResource("ConcavePolygonShape3D_fefkg")

[node name="MeshInstance3D8" type="MeshInstance3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.664316, -19.0404)
mesh = SubResource("BoxMesh_bptv1")

[node name="StaticBody3D" type="StaticBody3D" parent="Node3D/MeshInstance3D8"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Node3D/MeshInstance3D8/StaticBody3D"]
shape = SubResource("ConcavePolygonShape3D_fefkg")

[node name="Decal" type="Decal" parent="Node3D/MeshInstance3D8"]
transform = Transform3D(1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 0.319016, 0)
size = Vector3(2, 0.215, 1.935)
texture_albedo = ExtResource("5_hesfj")
modulate = Color(1, 1, 0, 1)
upper_fade = 0.0052011
lower_fade = 0.00735548

[node name="MeshInstance3D7" type="MeshInstance3D" parent="Node3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.121993, -12.6797)
mesh = SubResource("BoxMesh_bptv1")

[node name="StaticBody3D" type="StaticBody3D" parent="Node3D/MeshInstance3D7"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Node3D/MeshInstance3D7/StaticBody3D"]
shape = SubResource("ConcavePolygonShape3D_m06vb")

[node name="Node3D2" type="Node3D" parent="."]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, -25.798, 0, -26.215)

[node name="MeshInstance3D" type="MeshInstance3D" parent="Node3D2"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -5.5, 2.5, 7.37419)
mesh = SubResource("BoxMesh_qctcq")
skeleton = NodePath("../..")

[node name="StaticBody3D" type="StaticBody3D" parent="Node3D2/MeshInstance3D"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Node3D2/MeshInstance3D/StaticBody3D"]
shape = SubResource("ConcavePolygonShape3D_20dey")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="Node3D2"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 6.30579, 2.5, 13.094)
mesh = SubResource("BoxMesh_dq3x3")
skeleton = NodePath("../..")

[node name="MeshInstance3D3" type="MeshInstance3D" parent="Node3D2"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.275814, 2.5, -15.6258)
mesh = SubResource("BoxMesh_qctcq")
skeleton = NodePath("../..")

[node name="MeshInstance3D4" type="MeshInstance3D" parent="Node3D2"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5.5, 2.5, -15.6258)
visible = false
mesh = SubResource("BoxMesh_qctcq")
skeleton = NodePath("../..")

[node name="MeshInstance3D6" type="MeshInstance3D" parent="Node3D2"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -5.5, 2.5, -38.4538)
mesh = SubResource("BoxMesh_qctcq")
skeleton = NodePath("../..")

[node name="MeshInstance3D7" type="MeshInstance3D" parent="Node3D2"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 5.5, 2.5, -38.4538)
mesh = SubResource("BoxMesh_qctcq")
skeleton = NodePath("../..")

[node name="Floor2" type="MeshInstance3D" parent="Node3D2"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -0.25, -24.214)
mesh = SubResource("BoxMesh_gd0ev")
skeleton = NodePath("../..")

[node name="StaticBody3D" type="StaticBody3D" parent="Node3D2/Floor2"]

[node name="CollisionShape3D" type="CollisionShape3D" parent="Node3D2/Floor2/StaticBody3D"]
shape = SubResource("ConcavePolygonShape3D_n4aja")

[node name="SpotLight3D" type="SpotLight3D" parent="."]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, -0.523484, 0.968238, 3.02042)
layers = 3
light_color = Color(1, 1, 0, 1)
light_energy = 8.467
shadow_enabled = true
spot_range = 49.736
spot_attenuation = 1.62451
spot_angle = 19.75
spot_angle_attenuation = 0.143587

[node name="OmniLight3D" type="OmniLight3D" parent="."]
transform = Transform3D(-0.995583, 0, -0.0938825, 0, 1, 0, 0.0938825, 0, -0.995583, -3.32982, 1.51033, 0.905631)
visible = false
layers = 3
shadow_enabled = true
shadow_blur = 1.85

[node name="SpotLight3D2" type="SpotLight3D" parent="."]
transform = Transform3D(-4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, -0.523484, 0.968238, 0.690189)
layers = 3
light_color = Color(0, 0.74902, 0, 1)
light_energy = 8.924
shadow_enabled = true
spot_range = 12.936
spot_attenuation = 1.18921
spot_angle = 20.57
spot_angle_attenuation = 0.105112

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -3.57119, 0.914854, 0.630305)
mesh = SubResource("BoxMesh_qjnnx")

[node name="MeshInstance3D2" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -3.57119, 0.914854, 1.35133)
mesh = SubResource("BoxMesh_qjnnx")

[node name="MeshInstance3D3" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -3.57119, 0.914854, 2.47761)
mesh = SubResource("BoxMesh_qjnnx")

[node name="MeshInstance3D4" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -3.57119, 0.914854, 3.40356)
mesh = SubResource("BoxMesh_qjnnx")
